#!/usr/bin/perl
use 5.010;
use strict;
use warnings;
my $lib_path=`echo $0 | sed "s/\$(basename $0)//g"`;
chomp($lib_path);
require("$lib_path/common.pl");

#cmd vars
my $CAT="/bin/cat";
my $SSH="/usr/bin/ssh";
my $TOUCH="/bin/touch";
my $RM="/bin/rm";
my $MKDIR="/bin/mkdir -p";
my $SCP="/usr/bin/scp";
my $PWD="/bin/pwd";
my $NSLOOKUP="/usr/bin/nslookup";

#remote file vars
my $remote_keepalived_config="/usr/local/etc/keepalived/keepalived.conf";
my $remote_keepalived_backupfile="/usr/local/etc/keepalived/keepalived.conf";
my $remote_cmd_dir="/home/lvsmonitor/lvs-node/";
my $remote_vip_admin=$remote_cmd_dir."vip_admin.pl";
my $remote_get_rs=$remote_cmd_dir."get_rs.pl";
my $remote_get_allvs=$remote_cmd_dir."get_allvs.pl";
my $remote_reloade_keepalived=$remote_cmd_dir."reload_keepalived.pl";

#global vars
my $lvs_name;
my $local_config_modified=0;
my $action;
my @args;

#local temp config file vars
#file download from the remote lvs node
my $local_config="keepalived.conf";		
#file download from the remote lvs node and we changed something
my $local_modified_config="modified_keepalived.conf"; 	
my $LOG;

my %err_info=(
	211=>"cat file failed",
	212=>"lvs ip resolv error",
	213=>"touch log file failed",
	214=>"get time error",
	215=>"get_vs failed",
	216=>"no match",
	217=>"ip format is wrong",
	218=>"port format is wrong",
	219=>"please give rs ip",
	220=>"number of args is not currect",
	221=>"args name is wrong",
	222=>"reload_keepalived failed",
	223=>"command(first arg) is not supported",
	224=>"download keepalived config file failed",
	225=>"write @ to file failed",
	226=>"local keepalived config file doesn't exit",
	227=>"upload_conf failed",
	228=>"touch modified_keepalived file failed",
	);

my %action=(
	"add_vs"=>\&add_vs,		
	"add_rs"=>\&add_rs,		
	"del_vs"=>\&del_vs,		
	"del_rs"=>\&del_rs,		
	"add_vip"=>\&add_vip,		
	"del_vip"=>\&del_vip,		
	"get_vs"=>\&get_vs, 		
	"get_rs"=>\&get_rs,		
	"backup"=>\&backup,		
	"download_conf"=>\&download_conf,
	"upload_conf"=>\&upload_conf,
	"backup_conf"=>\&backup_conf,
	"reload_keepalived"=>\&reload_keepalived,
	);


sub get_vs(@){
	if($#_ >1){err_exit($err_info{220},220)}
	if(defined $_[0]){
		if(!is_ip($_[0])){err_exit($err_info{217},217)}
	}
	if(defined $_[1]){
		if(!is_port($_[1])){err_exit($err_info{218},218)}
	}
	my $args=join " ",@_;
	my @ret=`$SSH $lvs_name sudo $remote_get_allvs $args`;
	write_log("cmd:$SSH $lvs_name sudo $remote_get_allvs $args");
	if(catch_pattern("success",@ret)){
		write_log("result:success\n");
		say @ret;
	}elsif(catch_pattern("no match",@ret)){
		write_log("result:no match\n");
		err_exit($err_info{216},216);
	}
	else{
		write_log("result:$err_info{215}\n");
		err_exit($err_info{215},215);
	}
}


sub get_rs(@){
	if($#_ > 0){err_exit($err_info{220},220)}
	if(not defined $_[0]){
		err_exit($err_info{219},219)
	}elsif(!is_ip($_[0])){
		err_exit($err_info{217},217);
	}
	my $args=$_[0];
	my @ret=`$SSH $lvs_name sudo $remote_get_rs $args`;
	write_log("cmd:$SSH $lvs_name sudo $remote_get_rs $args");
	if(catch_pattern("success",@ret)){
		write_log("result:success\n");
		say @ret;
	}elsif(catch_pattern("no match",@ret)){
		write_log("result:no match\n");
		err_exit($err_info{216},216);
	}
	else{
		write_log("result:$err_info{215}\n");
		err_exit($err_info{215},215);
	}
}


sub add_vip{
	#add a vip on the lo of the 
	#remote lvs node
	if($#_ ne 0){err_exit($err_info{221},221)}
	my $vip=shift @_;
	if(!is_ip($vip)){
		err_exit($err_info{217},217);
	}
	my @ret=`$SSH $lvs_name sudo $remote_vip_admin add $vip`;
	write_log("cmd:$SSH $lvs_name sudo $remote_vip_admin add $vip");
	write_log("result:@ret");
	say @ret;
}


sub del_vip{
	#del a vip on the lo of the
	#remote lvs node
	if($#_ ne 0){err_exit($err_info{221},221)}
	my $vip=shift @_;
	if(!is_ip($vip)){
		err_exit($err_info{217},217);
	}
	my @ret=`$SSH $lvs_name sudo $remote_vip_admin del $vip`;
	write_log("cmd:$SSH $lvs_name sudo $remote_vip_admin del $vip");
	write_log("result:@ret");
	say @ret;
}


sub download_conf{
	if($#_ > -1){err_exit($err_info{220},200)}
	`$SCP $lvs_name:$remote_keepalived_config $local_config`;
	if($? ne 0){
		err_exit(err_info{224},224);
	}
	write_log("$SCP $lvs_name:$remote_keepalived_config $local_config");
	if($? ne 0){
		write_log($err_info{224});
		err_exit($err_info{224},224);
	}
	say "download keepalived config file success";
	#write a download time in the config file;
	my $time=get_time();
	my @ret=`$CAT $local_config`;
	if(!check_up_time($time,@ret)){
		@ret=("!time:".$time."-download",@ret);
	}
	write_info($local_config,@ret);
	write_log("download keepalived config file success");
}



sub upload_conf($$){
	#upload the config file we changed local 
	#up to the remote lvs node
	#every time before we upload the config 
	#we will backup on hte remote lvs node

	#backup_conf
	if(!-f $local_config){
		err_exit($err_info{226},226);
	}
	my @ret=`$CAT $local_config`;
	my $time=get_time();
	for(@ret){
		#remove the download time infor mation 
		s/!time:[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}:[0-9]{2}:[0-9]{2}--download/!time:$time-upload/;
	}
	if(!-f $local_modified_config){
		`$TOUCH $local_modified_config`;
		if($? ne 0){
			err_exit(err_info{228},228);
		}
	}
	write_info($local_modified_config,@ret);
	`$SCP $local_modified_config $lvs_name:$remote_keepalived_config`;
	if($? ne 0){
		write_log($err_info{227});
		err_exit($err_info{227},227);
	}
	say "upload_conf success";
	write_log("upload_conf success");

}



sub backup_conf($$){
	#backup the keepalived config file on  
	#on the remote lvs node
	#we will add the backup time information 
	#in the keepalived file

	

}


sub rollback{
	#rollback the lastest keepalived cnfig file
	#to use




	reload_keepalived();
}




sub reload_keepalived{
	my $args=join " ",@_;
	if($#_ ne 0 and $#_ ne -1){err_exit($err_info{220},220)}
	if(defined $_[0]){
		if($_[0] ne "vrrp" and $_[0] ne "check"){
			err_exit($err_info{221},221);
		}
	}
	my @ret=`$SSH $lvs_name sudo $remote_reloade_keepalived $args`;
	write_log("cmd:$SSH $lvs_name sudo remote_reloade_keepalived $args");
	if(catch_pattern("success",@ret)){
		write_log("result:success\n");
		say @ret;
	}
	else{
		write_log("result:$err_info{222}\n");
		err_exit($err_info{222},222);
	}

}


sub exec_action{
	my $action=shift @_;
	my @args=@_;
	if(!$action{$action}){
		err_exit($err_info{223},223);
	}else{
		$action{$action}(@args);
	}	
}


sub load_local_config($){
	my @ret=`$CAT $_[0]`;
	if($! ne 0){
		err_exit(err_info{211},211);
	}
	else{
		return @ret;
	}
}




sub check_up_time($@){
	my $time=shift @_;
	for(@_){
		if($_=~/!time:[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}:[0-9]{2}:[0-9]{2}--upload/){
			s/!time:[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}:[0-9]{2}:[0-9]{2}--upload/!time:$time-download/;
			return 1;
		}
	}
	return 0;
}

sub add_vs($$$){

}


sub del_vs($$$){

}


sub catch_pattern($@){
	my $pattern=shift @_;
	my @str=@_;
	for(@str){
		if($_=~/$pattern/){
			return 1;
		}
	}
	return 0;
}


sub check_lvs_ip($){
	#this function will resolve the ip of 
	#the lvs server
	my @ret=`$NSLOOKUP $_[0]`;
	for(@ret){
		if($_=~/answer/){return 1}
	}
	return 0;
}

sub write_info($@){
	#write a list to a file
	my $file=shift @_;
	my @infos=@_;
	open(F,">$file");
	for(@infos){
		chomp($_);
		say F $_;
	}
}

sub write_log($){
    #write a log for every operator command
    open(LOG,">>$LOG");
   #if($! ne 0){
   #	err_exit("open file log failed",0);
   #}
    my $time=get_time();
    my $info=$_[0];
    $info=$time.$info;
    say LOG $info;
    close(LOG);

}

sub init_env{
	#init nessory env args
	my $ret=`$PWD`;
	my @ret=split /\//,$ret;
	$lvs_name=$ret[$#ret];
	chomp($lvs_name);
	if(!is_ip($lvs_name)){
		err_exit($err_info{212},212);
	}
	#if(!check_lvs_ip($lvs_name)){
	#	err_exit(err_info{212},212);
	#}
	if( !-f 'log'){
		`$TOUCH log`;
		if($! ne 0){err_exit($err_info{213},213)}
		else{
			
		}
	}
	$LOG="log";
}


sub check_argv{
	if($#ARGV < 0 or $ARGV[0] eq "help"){usage($0)}
	$action=shift @ARGV;
	@args=@ARGV;
	if(@args){
		for(@args){
			s/\w+=//;
		}
	}
}


##########main
check_argv();
init_env();
#exec_action(@ARGV)
#get_vs(@args)
exec_action($action,@args);






